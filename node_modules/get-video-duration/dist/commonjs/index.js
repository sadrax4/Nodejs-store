"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVideoDurationInSeconds = void 0;
var ffprobe = require("@ffprobe-installer/ffprobe");
var execa = require("execa");
var isStream = require("is-stream");
var getFFprobeWrappedExecution = function (input, ffprobePath) {
    var params = ['-v', 'error', '-show_format', '-show_streams'];
    var overridenPath = ffprobePath || ffprobe.path;
    if (typeof input === 'string') {
        return execa(overridenPath, __spreadArray(__spreadArray([], params, true), [input], false));
    }
    if (isStream(input)) {
        return execa(overridenPath, __spreadArray(__spreadArray([], params, true), ['-i', 'pipe:0'], false), {
            reject: false,
            input: input,
        });
    }
    throw new Error('Given input was neither a string nor a Stream');
};
/**
 * Returns a promise that will be resolved with the duration of given video in
 * seconds.
 *
 * @param input Stream or URL or path to file to be used as
 * input for `ffprobe`.
 * @param [ffprobePath] Optional. Path to `ffprobe` binary. Do not provide any
 * value for this parameter unless you need to override the path to `ffprobe`.
 * Defaults to the path provided by `@ffprobe-installer/ffprobe`, which works in
 * most environments.
 *
 * @return Promise that will be resolved with given video duration in
 * seconds.
 */
var getVideoDurationInSeconds = function (input, ffprobePath) { return __awaiter(void 0, void 0, void 0, function () {
    var stdout, matched;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, getFFprobeWrappedExecution(input, ffprobePath)];
            case 1:
                stdout = (_a.sent()).stdout;
                matched = stdout.match(/duration="?(\d*\.\d*)"?/);
                if (matched && matched[1])
                    return [2 /*return*/, parseFloat(matched[1])];
                throw new Error('No duration found!');
        }
    });
}); };
exports.getVideoDurationInSeconds = getVideoDurationInSeconds;
exports.default = getVideoDurationInSeconds;
//# sourceMappingURL=index.js.map